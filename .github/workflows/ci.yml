name: Go App CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: sudo apt-get update && sudo apt-get install -y docker-compose

      - name: Build Docker Compose services
        run: docker-compose build

      - name: Copy project files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          source: "."  # копируем всё
          target: "~/go-app"

      - name: SSH and deploy on VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: 22
          script: |
            cd ~/go-app

            # Создаём папку для бэкапов, если нет
            mkdir -p ~/db_backups

            # Делаем дамп базы данных в файл с таймштампом
            docker exec $(docker ps -qf "name=db") pg_dump -U postgres tipOnlineShop > ~/db_backups/backup_$(date +"%Y%m%d_%H%M%S").sql

            # Обновляем nginx конфиг
            sudo cp ./nginx/app.conf /etc/nginx/sites-available/app
            sudo ln -sf /etc/nginx/sites-available/app /etc/nginx/sites-enabled

            # Перезапускаем Nginx
            sudo systemctl reload nginx

            sudo cp ./fail2ban/fail2ban.ini /etc/fail2ban/jail.local

            # Останавливаем текущие контейнеры
            docker-compose down

            docker-compose build

            # Запускаем только БД
            docker-compose up -d db

            # Ждём, пока БД станет "healthy"
            echo "Waiting for database to become healthy..."
            for i in {1..10}; do
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' $(docker-compose ps -q db))
              if [ "$STATUS" = "\"healthy\"" ]; then
                echo "Database is healthy."
                break
              fi
              echo "Database not ready yet. Retrying in 3 seconds..."
              sleep 3
            done

            # Принудительно перезапускаем app-контейнер (если уже был)
            docker-compose rm -f app || true

            # Запускаем app
            docker-compose up -d app

            # Принудительно перезапускаем app-контейнер (если уже был)
            docker-compose rm -f app1 || true

            # Запускаем app
            docker-compose up -d app1

            # Принудительно перезапускаем app-контейнер (если уже был)
            docker-compose rm -f app2 || true

            # Запускаем app
            docker-compose up -d app2

            # Запускаем с пересборкой
            # docker-compose up -d --build


